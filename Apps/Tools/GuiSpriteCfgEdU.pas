unit GuiSpriteCfgEdU;

interface

uses
  Windows,
  Messages,
  SysUtils,
  Variants,
  Classes,
  Graphics,
  Controls,
  Forms,
  Dialogs,
  Menus,
  Grids,
  ValEdit,
  ComCtrls;

type
  TfmGuiSpriteEd = class(TForm)
    menuMain: TMainMenu;
    sbMain: TStatusBar;
    menuFile: TMenuItem;
    menuFileOpen: TMenuItem;
    menuFileNew: TMenuItem;
    menuFileSave: TMenuItem;
    N1: TMenuItem;
    menuFileExit: TMenuItem;
    vleSpriteProps: TValueListEditor;
    popSpriteProps: TPopupMenu;
    dlgOpenImageCfg: TOpenDialog;
    popSpritePropsAdd: TMenuItem;
    popSpritePropsDelete: TMenuItem;
    dlgSave: TSaveDialog;
    procedure menuFileExitClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure menuFileNewClick(Sender: TObject);
    procedure popSpritePropsAddClick(Sender: TObject);
    procedure popSpritePropsDeleteClick(Sender: TObject);
    procedure menuFileSaveClick(Sender: TObject);
    procedure menuFileOpenClick(Sender: TObject);
    procedure popSpritePropsPopup(Sender: TObject);
  private
    { Private declarations }
    FImageNames: TStringList;
    function LoadImageReference: boolean;
  public
    { Public declarations }
  end;

var
  fmGuiSpriteEd: TfmGuiSpriteEd;

  
implementation

{$R *.dfm}

uses
  ZbConfigManager,
  ZEDXImageLib,
  SpritePropDlgU;


//////////////////////////////////////////////////////////////////////////
procedure TfmGuiSpriteEd.FormCreate(Sender: TObject);
begin
  ConfigManager := TZbConfigManager.Create ('');
  FImageNames := TStringList.Create;
  FImageNames.Sorted := TRUE;
  FImageNames.CaseSensitive := TRUE;
end;

//////////////////////////////////////////////////////////////////////////
procedure TfmGuiSpriteEd.FormDestroy(Sender: TObject);
begin
  FreeAndNIL (ConfigManager);
  FreeAndNIL (FImageNames);
end;

//////////////////////////////////////////////////////////////////////////
procedure TfmGuiSpriteEd.menuFileExitClick(Sender: TObject);
begin
  Close;
end;

//////////////////////////////////////////////////////////////////////////
function TfmGuiSpriteEd.LoadImageReference: boolean;
var
  ImgRefNames: TZEImageNames;
  iIndex: integer;
begin
  Result := FALSE;
  //
  if (NOT dlgOpenImageCfg.Execute) then Exit;
  FImageNames.Clear;
  //
  ImgRefNames := TZEImageNames.Create (NIL);
  try
    ImgRefNames.LoadFromStrEnum (ConfigManager.LoadSimpleConfig (dlgOpenImageCfg.FileName));
    for iIndex := 0 to Pred (ImgRefNames.AliasCount) do
      FImageNames.Add (ImgRefNames.AliasListA [iIndex]);
    for iIndex := 0 to Pred (ImgRefNames.NamesCount) do
      FImageNames.Add (ImgRefNames.NamesListA [iIndex]);
  finally
    ImgRefNames.Free;
  end;
  //
  Result := TRUE;
end;

//////////////////////////////////////////////////////////////////////////
procedure TfmGuiSpriteEd.menuFileNewClick(Sender: TObject);
begin
  if (NOT LoadImageReference) then Exit;
  vleSpriteProps.Enabled := TRUE;
  vleSpriteProps.Strings.Clear;
  menuFileSave.Enabled := TRUE;
end;

//////////////////////////////////////////////////////////////////////////
procedure TfmGuiSpriteEd.menuFileOpenClick(Sender: TObject);
begin
  //
end;

//////////////////////////////////////////////////////////////////////////
procedure TfmGuiSpriteEd.menuFileSaveClick(Sender: TObject);
var
  F: TextFile;
  iIndex: integer;
begin
  if (vleSpriteProps.RowCount <= 0) then Exit;
  if (NOT dlgSave.Execute) then Exit;
  //
  AssignFile (F, dlgSave.FileName);
  try Rewrite (F); except Exit; end;
  //
  try
    WriteLn (F, ' +----------------------------------------------');
    WriteLn (F, ' | File: ', ExtractFileName (dlgSave.FileName));
    WriteLn (F, ' +----------------------------------------------');
    WriteLn (F, ' |     * Auto-Generated by GuiSprCfgEditor *');
    WriteLn (F, ' +----------------------------------------------');
    WriteLn (F);
    //
    for iIndex := 0 to Pred (vleSpriteProps.Strings.Count) do
      WriteLn (F, vleSpriteProps.Strings [iIndex]);
  finally
    CloseFile (F);
  end;
end;

//////////////////////////////////////////////////////////////////////////
procedure TfmGuiSpriteEd.popSpritePropsAddClick(Sender: TObject);
var
  lResult: integer;
begin
  fmSpritePropDlg.cbImageNames.Items.Clear;
  fmSpritePropDlg.cbImageNames.Items.AddStrings (FImageNames);
  //
  lResult := fmSpritePropDlg.ShowModal;
  if (lResult = mrCancel) then Exit;
  //
  with fmSpritePropDlg do
    vleSpriteProps.InsertRow (
      Format ('%s/%s',
        [cbControlsList.Items [cbControlsList.ItemIndex], ledSubClassName.Text]),
      Format ('%s,%d,%d', [cbImageNames.Items [cbImageNames.ItemIndex],
        sedFirstFrame.Value, sedLastFrame.Value]),
      TRUE
      );
end;

//////////////////////////////////////////////////////////////////////////
procedure TfmGuiSpriteEd.popSpritePropsDeleteClick(Sender: TObject);
begin
  //
end;

//////////////////////////////////////////////////////////////////////////
procedure TfmGuiSpriteEd.popSpritePropsPopup(Sender: TObject);
begin
  popSpritePropsDelete.Enabled := (vleSpriteProps.Enabled) AND (vleSpriteProps.Row >= 0);
end;

end.
